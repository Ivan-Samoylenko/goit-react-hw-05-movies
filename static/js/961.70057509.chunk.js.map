{"version":3,"file":"static/js/961.70057509.chunk.js","mappings":"iRAWe,SAASA,IAAgB,IAAD,IACrC,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IA0B7C,OAxBAC,EAAAA,EAAAA,YAAU,YACR,mCAAC,kHAEkCC,EAAAA,EAAAA,IAAgBP,GAFlD,mBAEWQ,EAFX,EAEWA,OAAQC,EAFnB,EAEmBA,KAED,MAAXD,EAJP,sBAKW,IAAIE,MACR,yDANP,OAUGC,QAAQC,IAAIH,GACZV,EAAgBU,GAXnB,sDAaO,KAAMI,SAASJ,KAAKK,eAb3B,wBAcKC,EAAAA,GAAAA,MAAY,KAAMF,SAASJ,KAAKK,gBAdrC,2BAkBGC,EAAAA,GAAAA,MAAY,KAAMC,SAlBrB,0DAAD,sDAqBD,GAAE,CAAChB,KAGF,iCACE,SAAC,KAAD,CAAMiB,GAAIf,EAAV,sBACA,yBAAMJ,EAAaoB,kBACnB,2BACE,yBACE,SAAC,KAAD,CAASD,GAAG,OAAZ,qBAEF,yBACE,SAAC,KAAD,CAASA,GAAG,UAAZ,2BAIJ,SAAC,EAAAE,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,C,sKCzDKC,EAAU,mCAIT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,8FACQC,EAAAA,GAAAA,IAAU,oBAAqB,CAC1CC,OAAQ,CAAEC,QAASJ,KAFhB,0GAMA,SAAeK,IAAtB,4CAAO,OAAP,oBAAO,uGAAgCC,EAAhC,+BAAuC,EAAvC,SACQJ,EAAAA,GAAAA,IAAU,qBAAsB,CAC3CC,OAAQ,CACNC,QAASJ,EACTM,KAAAA,KAJC,2GASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,0FAAkCF,EAAlC,+BAAyC,EAAzC,SACQJ,EAAAA,GAAAA,IAAU,gBAAiB,CACtCC,OAAQ,CACNC,QAASJ,EACTQ,MAAAA,EACAF,KAAAA,KALC,2GAUA,SAAepB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BuB,GAA/B,iFACQP,EAAAA,GAAAA,IAAA,iBAAoBO,GAAY,CAC3CN,OAAQ,CACNC,QAASJ,KAHR,0GA3BPE,EAAAA,GAAAA,SAAAA,QAAyB,+B","sources":["pages/MovieDetails/MovieDetails.jsx","services/moviesAPI.js"],"sourcesContent":["import {\n  NavLink,\n  Link,\n  Outlet,\n  useParams,\n  useLocation,\n} from 'react-router-dom';\nimport { Suspense, useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { getMovieDetails } from 'services';\n\nexport default function MovieDetails() {\n  const [movieDetails, setMovieDetails] = useState([]);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  useEffect(() => {\n    (async function getDetails() {\n      try {\n        const { status, data } = await getMovieDetails(movieId);\n\n        if (status !== 200) {\n          throw new Error(\n            'Failed to load movie details, try reloading the page.'\n          );\n        }\n\n        console.log(data);\n        setMovieDetails(data);\n      } catch (error) {\n        if (error.response.data.status_message) {\n          toast.error(error.response.data.status_message);\n          return;\n        }\n\n        toast.error(error.message);\n      }\n    })();\n  }, [movieId]);\n\n  return (\n    <>\n      <Link to={backLinkHref}>go back</Link>\n      <div>{movieDetails.original_title}</div>\n      <ul>\n        <li>\n          <NavLink to=\"cast\">Cast</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"reviews\">Reviews</NavLink>\n        </li>\n      </ul>\n\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = '6c0ec3a2b4afdab003374b17f43d4a73';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function getGenres() {\n  return await axios.get('/genre/movie/list', {\n    params: { api_key: API_KEY },\n  });\n}\n\nexport async function getTrendingByDay(page = 1) {\n  return await axios.get('trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n      page,\n    },\n  });\n}\n\nexport async function searchMovie(query, page = 1) {\n  return await axios.get('/search/movie', {\n    params: {\n      api_key: API_KEY,\n      query,\n      page,\n    },\n  });\n}\n\nexport async function getMovieDetails(movie_id) {\n  return await axios.get(`/movie/${movie_id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n}\n\nexport async function getMovieCast(movie_id) {\n  return await axios.get(`/movie/${movie_id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n}\n\nexport async function getMovieReviews(movie_id) {\n  return await axios.get(`/movie/${movie_id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n}\n"],"names":["MovieDetails","useState","movieDetails","setMovieDetails","movieId","useParams","backLinkHref","useLocation","state","from","useEffect","getMovieDetails","status","data","Error","console","log","response","status_message","toast","message","to","original_title","Suspense","fallback","API_KEY","getGenres","axios","params","api_key","getTrendingByDay","page","searchMovie","query","movie_id"],"sourceRoot":""}