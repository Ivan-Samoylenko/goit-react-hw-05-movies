{"version":3,"file":"static/js/328.e1bc5b6e.chunk.js","mappings":"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","sources":["pages/Cast/Cast.styled.js","pages/Cast/Cast.jsx","services/moviesAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: ${p => p.theme.space[3]};\n\n  ${p => p.theme.mediaQueries.tablet} {\n    gap: ${p => p.theme.space[4]};\n  }\n`;\n\nexport const CastListItem = styled.li`\n  display: flex;\n  gap: ${p => p.theme.space[3]};\n\n  ${p => p.theme.mediaQueries.tablet} {\n    gap: ${p => p.theme.space[4]};\n  }\n`;\n\nexport const PhotoWraper = styled.div`\n  width: 80px;\n\n  ${p => p.theme.mediaQueries.tablet} {\n    width: 150px;\n  }\n`;\n\nexport const Photo = styled.img`\n  width: 80px;\n  height: 120px;\n  object-fit: cover;\n\n  ${p => p.theme.mediaQueries.tablet} {\n    width: 150px;\n    height: 225px;\n  }\n`;\n\nexport const Info = styled.div``;\n\nexport const Name = styled.h3``;\n\nexport const Character = styled.p``;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport {\n  CastList,\n  CastListItem,\n  PhotoWraper,\n  Photo,\n  Info,\n  Name,\n  Character,\n} from './Cast.styled';\nimport { getMovieCast } from 'services';\nimport imageNotFound from '../../images/image-not-found.jpg';\n\nexport default function Cast() {\n  const [cast, setCast] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    (async function getCast() {\n      try {\n        const {\n          status,\n          data: { cast },\n        } = await getMovieCast(movieId);\n\n        if (status !== 200) {\n          throw new Error('Failed to load cast, try reloading the page.');\n        }\n\n        setCast(cast);\n      } catch (error) {\n        if (error.response && error.response.data.status_message) {\n          toast.error(error.response.data.status_message);\n          return;\n        }\n\n        toast.error(error.message);\n      }\n    })();\n  }, [movieId]);\n\n  return (\n    <>\n      {cast && (\n        <CastList>\n          {cast.map(actor => (\n            <CastListItem key={actor.id}>\n              <PhotoWraper>\n                <Photo\n                  src={\n                    actor.profile_path\n                      ? `https://image.tmdb.org/t/p/w300${actor.profile_path}`\n                      : imageNotFound\n                  }\n                  alt={actor.name}\n                />\n              </PhotoWraper>\n              <Info>\n                <Name>Name: {actor.name}</Name>\n                <Character>\n                  Character: {actor.character ? actor.character : 'N/A'}\n                </Character>\n              </Info>\n            </CastListItem>\n          ))}\n        </CastList>\n      )}\n      {!cast && <div>Sorry there are no cast</div>}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = '6c0ec3a2b4afdab003374b17f43d4a73';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function getGenres() {\n  return await axios.get('/genre/movie/list', {\n    params: { api_key: API_KEY },\n  });\n}\n\nexport async function getTrendingByDay(page = 1) {\n  return await axios.get('trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n      page,\n    },\n  });\n}\n\nexport async function searchMovie(query, page = 1) {\n  return await axios.get('/search/movie', {\n    params: {\n      api_key: API_KEY,\n      query,\n      page,\n    },\n  });\n}\n\nexport async function getMovieDetails(movie_id) {\n  return await axios.get(`/movie/${movie_id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n}\n\nexport async function getMovieCast(movie_id) {\n  return await axios.get(`/movie/${movie_id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n}\n\nexport async function getMovieReviews(movie_id) {\n  return await axios.get(`/movie/${movie_id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n}\n"],"names":["CastList","styled","p","theme","space","mediaQueries","tablet","CastListItem","PhotoWraper","Photo","Info","Name","Character","Cast","useState","cast","setCast","movieId","useParams","useEffect","getMovieCast","status","data","Error","response","status_message","toast","message","map","actor","src","profile_path","imageNotFound","alt","name","character","id","API_KEY","getGenres","axios","params","api_key","getTrendingByDay","page","searchMovie","query","getMovieDetails","movie_id","getMovieReviews"],"sourceRoot":""}